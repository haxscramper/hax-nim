[[templ]]
name = "bash_simple"
uname = "bash_simple_0"
lang_ext = "sh"
body = """
#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# bash
set -o nounset
set -o errexit
msg="colecho -b"
"""

[[templ]]
name = "elv"
lang_ext = "elv"
body = """
#!/usr/bin/env elvish
# -*- coding: utf-8 -*-
# elvish
"""

[[templ]]
name = "Python simple"
lang_ext = "py"
body = """
#!/usr/bin/env python
"""

[[templ]]
name = "perl"
lang_ext = "pl"
body = """
#!/usr/bin/env perl
# -*- coding: utf-8 -*-
# perl

use warnings;
use strict;

# Command line argument parsing
use Pod::Usage;
use Getopt::Long;
use Data::Dumper;

# Allow to use true and false as named constants
use constant false => 0;
use constant true  => 1;

# Allow to use functions with parameter signatures
use v5.20;
use feature qw(signatures);
no warnings qw(experimental::signatures);

sub log1 ($message, $ind = 0) { system("colecho -I:$ind -- '$message'"); }
sub err1 ($message, $ind = 0) { system("colecho -I:$ind -e:2 -- '$message'"); }
sub info1($message, $ind = 0) { system("colecho -I:$ind -i:1 -- '$message'"); }
sub warn1($message, $ind = 0) { system("colecho -I:$ind -w:1 -- '$message'"); }

say "Hello world";
"""


[[templ]]
name = "perl_portable"
lang_ext = "pl"
body = """
#!/usr/bin/env perl
# -*- coding: utf-8 -*-
# perl

use warnings;
use strict;

# Command line argument parsing
use Pod::Usage;
use Getopt::Long;
use Data::Dumper;
use File::Copy;
use Cwd;

# Allow to use true and false as named constants
use constant false => 0;
use constant true  => 1;

# Allow to use functions with parameter signatures
use v5.20;
use feature qw(signatures);
no warnings qw(experimental::signatures);

sub command_exists($comm) {
    return `which $comm 2> /dev/null` ne "";
}

# Pretty message printing
my $pretty_msg = command_exists("colecho");
sub log1($message)  {
    if ($pretty_msg) { system("colecho -- \\"$message\\"");
    } else { say "  - $message"; } }
sub err1($message)  {
    if ($pretty_msg) { system("colecho -e:2 -- \\"$message\\"");
    } else { say "!!! $message"; } }
sub info1($message) {
    if ($pretty_msg) { system("colecho -i:1 -- \\"$message\\"");
    } else { say "--> $message"; } }
sub warn1($message) {
    if ($pretty_msg) { system("colecho -w:1 -- \\"$message\\"");
    } else { say "=>> $message"; } }

say "Hello world";
"""

[[templ]]
name = "perl_heavy"
lang_ext = "pl"
description = "Fully-featured template with CLI parsing etc."
body = """
#!/usr/bin/env perl
# -*- coding: utf-8 -*-
# perl

use warnings;
use strict;

# Command line argument parsing
use Pod::Usage;
use Getopt::Long;
use Data::Dumper;
use File::Copy;
use Cwd;

# Allow to use true and false as named constants
use constant false => 0;
use constant true  => 1;

# Allow to use functions with parameter signatures
use v5.20;
use feature qw(signatures);
no warnings qw(experimental::signatures);

sub command_exists($comm) {
    return `which $comm 2> /dev/null` ne "";
}

sub write_file($file, $string) {
    open (FH, ">", $file);
    print FH $string;
    close FH;
}

# Pretty message printing
my $pretty_msg = command_exists("colecho");
sub log1($message)  {
    if ($pretty_msg) { system("colecho -- \\"$message\\"");
    } else { say "  - $message"; } }
sub err1($message)  {
    if ($pretty_msg) { system("colecho -e:2 -- \\"$message\\"");
    } else { say "!!! $message"; } }
sub info1($message) {
    if ($pretty_msg) { system("colecho -i:1 -- \\"$message\\"");
    } else { say "--> $message"; } }
sub warn1($message) {
    if ($pretty_msg) { system("colecho -w:1 -- \\"$message\\"");
    } else { say "=>> $message"; } }


my $quiet_run;
GetOptions(
    "quiet" => \\$quiet_run
    );

$quiet_run ||= false;


say "Hello world";

"""

[[templ]]
name = "perl_simple"
lang_ext = "pl"
description = "Template for simple perl script"
body = """
#!/usr/bin/env perl
# -*- coding: utf-8 -*-
# perl
use warnings;
use strict;
# Allow to use true and false as named constants
use constant false => 0;
use constant true  => 1;

# Allow to use functions with parameter signatures
use v5.20;
use feature qw(signatures);
no warnings qw(experimental::signatures);

say "Hello world";
"""

[[templ]]
name = "java_empty"
lang_ext = "java"
description = "empty .java file"
body = """
public class HelloWorld {
    public static void main(String[] args) {
        // Prints "Hello, World" in the terminal window.
        System.out.println("Hello, World");
    }
}
"""

[[templ]]
name = "LaTeX ru/en simple"
lang_ext = "tex"
body = """
\\documentclass[oneside,fleqn]{book}
\\usepackage[margin=0.2cm, paperwidth=16cm]{geometry}
\\usepackage[english,russian]{babel}
\\usepackage{fontspec}
\\usepackage[parfill]{parskip}
\\setmainfont{CMU Serif}[Ligatures=TeX]

\\begin{document}

Test     text
Тестовый текст

\\end{document}
"""

[[templ]]
name = "LaTeX en/ru minted"
lang_ext = "tex"
body = """
\\documentclass[oneside,fleqn]{book}
\\usepackage[margin=0.2cm, paperwidth=16cm]{geometry}
\\usepackage[english,russian]{babel}
\\usepackage{fontspec}
\\usepackage[parfill]{parskip}

\\setmainfont{CMU Serif}[Ligatures=TeX]
\\setmonofont{Consolas}

\\usepackage{minted}

\\begin{document}

Test     text
Тестовый текст

\\begin{minted}{java}
// Главный класс
public class Main {
	public static void main(String[] args) {
    System.out.println("Привет мир!");
	}
}
\\end{minted}

\\end{document}
"""

[[templ]]
name = "GNU Prolog"
lang_ext = "gplog"
body = """
:- initialization(main).
main :-
    %% <++>
    nl, halt.
"""

[[templ]]
name = "SWI-Prolog"
lang_ext = "splog"
body = """
:- initialization(main).

main :-
    %% <++>
    write("Hello world"),
    nl, halt.
"""

[[templ]]
name = "SWI-prolog interactive/test"
lang_ext = "splog"
body = """
:- initialization(main).

interactive :-
    nl
.

test :-
    nl
.

main :- test, halt.
"""


[[templ]]
name = "C++ logger"
lang_ext = "cpp"
body = """
#include <iostream>
#include <vector>


class Logger
{
  public:
    ~Logger() {
        std::cout << "\b\n";
    }

    static Logger log() {
        return Logger();
    }

    template <class T>
    Logger& operator<<(T t) {
        std::cout << t << " ";
        return *this;
    }
};

#define LOG Logger::log()

int main() {
    LOG << "Logger test";
}
"""

[[templ]]
name = "Graphviz simple"
lang_ext = "dot"
body = """digraph G {

}
"""

[[templ]]
name = "C hello world"
lang_ext = "c"
body = """
#include <stdio.h>

int main() {
    puts("Hello world");
}
"""

[[templ]]
name = "elisp simple"
lang_ext = "el"
body = """
(message "Hello world")
"""

[[templ]]
name = "Nim hello world"
lang_ext = "nim"
body = "echo \"Hello world!\""