[[templ]]
name = "bash_simple"
uname = "bash_simple_0"
lang_ext = "sh"
body = """
#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# bash
set -o nounset
set -o errexit
msg="colecho -b"
"""

[[templ]]
name = "elv"
lang_ext = "elv"
body = """
#!/usr/bin/env elvish
# -*- coding: utf-8 -*-
# elvish
"""

[[templ]]
name = "perl"
lang_ext = "pl"
body = """
#!/usr/bin/env perl
# -*- coding: utf-8 -*-
# perl

use warnings;
use strict;

# Command line argument parsing
use Pod::Usage;
use Getopt::Long;
use Data::Dumper;

# Allow to use true and false as named constants
use constant false => 0;
use constant true  => 1;

# Allow to use functions with parameter signatures
use v5.20;
use feature qw(signatures);
no warnings qw(experimental::signatures);

sub log1 ($message, $ind = 0) { system("colecho -I:$ind -- '$message'"); }
sub err1 ($message, $ind = 0) { system("colecho -I:$ind -e:2 -- '$message'"); }
sub info1($message, $ind = 0) { system("colecho -I:$ind -i:1 -- '$message'"); }
sub warn1($message, $ind = 0) { system("colecho -I:$ind -w:1 -- '$message'"); }

say "Hello world";
"""


[[templ]]
name = "perl_portable"
lang_ext = "pl"
body = """
#!/usr/bin/env perl
# -*- coding: utf-8 -*-
# perl

use warnings;
use strict;

# Command line argument parsing
use Pod::Usage;
use Getopt::Long;
use Data::Dumper;
use File::Which;

# Allow to use true and false as named constants
use constant false => 0;
use constant true  => 1;

# Allow to use functions with parameter signatures
use v5.20;
use feature qw(signatures);
no warnings qw(experimental::signatures);

sub command_exists($comm) {
    return defined (which "$comm");
}

# Pretty message printing
sub log1($message, $ind = 0)  {
    if (command_exists("colecho")) { system("colecho -I:$ind -- '$message'");
    } else { say "log1 $message"; } }
sub err1($message, $ind = 0)  {
    if (command_exists("colecho")) { system("colecho -I:$ind -e:2 -- '$message'");
    } else { say "log1 $message"; } }
sub info1($message, $ind = 0) {
    if (command_exists("colecho")) { system("colecho -I:$ind -i:1 -- '$message'");
    } else { say "log1 $message"; } }
sub warn1($message, $ind = 0) {
    if (command_exists("colecho")) { system("colecho -I:$ind -w:1 -- '$message'");
    } else { say "log1 $message"; } }

say "Hello world";
"""

[[templ]]
name = "perl_simple"
lang_ext = "pl"
description = "Template for simple perl script"
body = """
#!/usr/bin/env perl
# -*- coding: utf-8 -*-
# perl
use warnings;
use strict;
# Allow to use true and false as named constants
use constant false => 0;
use constant true  => 1;

# Allow to use functions with parameter signatures
use v5.20;
use feature qw(signatures);
no warnings qw(experimental::signatures);

say "Hello world";
"""

[[templ]]
name = "java_empty"
lang_ext = "java"
description = "empty .java file"
body = """
public class HelloWorld {
    public static void main(String[] args) {
        // Prints "Hello, World" in the terminal window.
        System.out.println("Hello, World");
    }
}
"""

[[templ]]
name = "LaTeX ru/en simple"
lang_ext = "tex"
body = """
\\documentclass[oneside,fleqn]{book}
\\usepackage[margin=0.3cm, paperwidth=14cm]{geometry}
\\usepackage[english,russian]{babel}
\\usepackage{fontspec}
\\usepackage[parfill]{parskip}

\\begin{document}

Test     text
Тестовый текст

\\end{document}
"""